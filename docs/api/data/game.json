{
  "apiVersion": "1",
  "swaggerVersion": "1.2",
  "basePath": "http:\/\/localhost:8081",
  "resourcePath": "\/game",
  "apis": [
    {
      "path": "\/game\/model",
      "operations": [
        {
          "httpMethod": "GET",
          "summary": "Fetch the model",
          "notes": "This (like the other rest api calls in this section) requires a valid game cookie to be set. It returns a json model of the current game set in your coookie.",
          "responseClass": "ClientModel",
          "nickname": "login",
          "parameters": []
        }
      ]
    },
    {
      "path": "\/game\/reset",
      "operations": [
        {
          "httpMethod": "POST",
          "summary": "Resets the current game",
          "notes": "This method is for resetting the current game (ie the moves played). For the default game, this resets it to after the initial placement. This returns the JSON for the model after it's been reset.",
          "responseClass": "The 'Client Model' JSON (identical to game/model)",
          "nickname": "login",
          "parameters": []
        }
      ]
    },{
      "path": "\/game\/commands",
      "operations": [
        {
          "httpMethod": "POST",
		      "summary": "Send a list of moves to the server",
		      "notes": "This method should be used for testing; you can apply a list of commands to the current game using this call. This is under \/game and not \/moves because this method should never be called from within the client model. You have to send a json list of objects - you can use the output from game\/commands. It returns the JSON for the model after the commands have been applied.",
          "responseClass": "Return's the 'Client Model' JSON (identical to game/model)",
          "nickname": "listCommands",
          "consumes":"application/json",
          "parameters": [
          {
            "description": "The moves to be sent",
            "paramType": "body",
            "required": true,
            "dataType": "List of Commands"
            }
          ]
        },
         {
          "httpMethod": "GET",
          "summary": "Fetch a list of commands for your current game.",
          "notes": "This gets all the commands that were applied to the initial client model. These will be removed if you call \/game\/reset",
          "responseClass": "List of Commands",
          "nickname": "login",
          "parameters": []
        }
      ]
    },{
      "path": "\/game\/addAI",
      "operations": [
        {
          "httpMethod": "POST",
	      "summary": "Add an AI player to your game",
	      "notes": "You'll need to have your cookie set for this game in order for this game to work.",
          "responseClass": "void",
          "nickname": "addAI",
          "parameters": [
          {
			"name":"AIType",
            "description": "The name of the AI player to add",
            "paramType": "form",
            "required": true,
            "dataType": "string"
            }
          ]
        }
      ]
    },{
      "path": "\/game\/listAI",
      "operations": [
        {
          "httpMethod": "GET",
	      "summary": "Get a list of the AI players",
          "responseClass": "",
          "nickname": "addAI"
        }
      ]
    }
  ],
  "models": {
    "ResourceList": {
      "id": "ResourceList",
      "required":["brick","ore","sheep","wheat","wood"],
      "properties": {
        "brick": {
          "type": "integer"
        },
        "ore": {
          "type": "integer"
        },
        "sheep": {
          "type": "integer"
        },
        "wheat": {
          "type": "integer"
        },
        "wood": {
          "type": "integer"
        }
      }
    },
    "MessageLine": {
      "id": "MessageLine",
      "required":["message","source"],
      "properties": {
        "message": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "MessageList": {
      "id": "MessageList",
      "properties": {
        "lines": {
          "type": "array",
          "required":true,
          "items": {
            "$ref": "MessageLine"
          }
        }
      }
    },
    "ClientModel": {
      "id": "ClientModel",
      "description": "The top level client model",
      "required":["bank","biggestArmy","chat","log","longestRoad","map","players","turnTracker","winner"],
      "properties": {
        "bank": {
          "description": "The cards available to be distributed to the players.",
          "type": "ResourceList"
        },
        "biggestArmy": {
          "description": "The orderID (0-3) of the player with the largest army. -1 for nobody.",
          "type": "number"
        },
        "chat": {
          "description": "All the chat messages.",
          "type": "MessageList"
        },
        "log": {
          "description": "All the log messages.",
          "type": "MessageList"
        },
        "longestRoad": {
          "description" : "The orderID (0-3) of the player with the longest road. -1 for nobody",
          "type": "number"
        },
        "map": {
          "type": "Map"
        },
        "players": {
          "type": "array",
          "items": {
            "$ref": "Player"
          }
        },
        "tradeOffer":{
          "description":"The current trade offer, if there is one.",
          "type": "TradeOffer"
        },
        "turnTracker": {
          "description":"This tracks who's turn it is and what action's being done.",
          "type": "TurnTracker"
        },
        "winner": {
          "description": "This is -1 when nobody's won yet. When they have, it's their order index [0-3]",
          "type": "number",
          "required": true
        }
      }
    },
    "TurnTracker": {
      "id": "TurnTracker",
      "required": ["currentTurn","status"],
      "properties": {
        "currentTurn": {
          "description":"Who's turn it is (0-3)",
          "type": "number",
          "required": false
        },
        "status": {
          "description":"What's happening now",
          "type": "string",
          "required": false
        }
      }
    },
    "HexGrid": {
      "id": "HexGrid",
      "required": ["hexes","offsets","radius","x0","y0"],
      "properties": {
        "hexes": {
          "description" : "A 2D array of hexes.",
          "type": "array",
          "items": {
            "$ref": "Hex"
          }
        },
        "offsets": {
          "description" : "The number of omitted cells in the hexgrid by row.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "radius": {
          "description" : "The distance between the center any corner of the grid. (if a grid is 5 wide, the radius is 2)",
          "type": "number"
        },
        "x0": {
          "description" : "The column in the array that (0,y) refers to.",
          "type": "number"
        },
        "y0": {
          "description" : "The row in the array that (x,0) refers to.",
          "type": "number"
        }
      }
    },
    "DevCardList": {
      "type": "object",
      "id": "DevCardList",
      "required": ["monopoly","monument","roadBuilding","soldier","yearOfPlenty"],
      "properties": {
        "monopoly": {
          "type": "number"
        },
        "monument": {
          "type": "number"
        },
        "roadBuilding": {
          "type": "number"
        },
        "soldier": {
          "type": "number"
        },
        "yearOfPlenty": {
          "type": "number"
        }
      }
    },
    "Player": {
      "id": "Player",
      "required": ["MAX_GAME_POINTS","cities","color","discarded","largestArmy","longestRoad","monuments","name","newDevCards","oldDevCards","orderNumber","playedDevCard","playerID","resources"],
      "properties": {
        "cities": {
          "description":"How many cities this player has left to play",
          "type": "number"
        },
        "color": {
          "description":"The color of this player.",
          "type": "string"
        },
        "discarded": {
          "description":"Whether this player has discarded or not already this discard phase.",
          "type": "boolean"
        },
        "largestArmy": {
          "description":"True if this player has the largest army award",
          "type": "boolean"
        },
        "longestRoad": {
          "description":"True if this player has the longest road award",
          "type": "boolean"
        },
        "monuments": {
          "description":"How many monuments this player has played.",
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "newDevCards": {
          "description":"The dev cards the player bought this turn.",
          "type": "DevCardList"
        },
        "oldDevCards": {
          "description":"The dev cards the player had when the turn started.",
          "type": "DevCardList"
        },
        "orderNumber": {
          "description":"What place in the array is this player? 0-3. It determines their turn order.",
          "type": "number"
        },
        "playedDevCard": {
          "description":"Whether the player has played a dev card this turn.",
          "type": "boolean"
        },
        "playerID": {
          "description":"The unique playerID. This is used to pick the client player apart from the others.",
          "type": "integer"
        },
        "resources": {
          "description":"The resource cards this player has.",
          "type": "ResourceList"
        }
      },
      "roads": {
        "type": "number"
      },
      "settlements": {
        "type": "integer"
      },
      "soldiers": {
        "type": "integer"
      },
      "victoryPoints": {
        "type": "integer"
      }
    },
    "Map": {
      "id": "Map",
      "required":["hexGrid","numbers","ports","radius","robber"],
      "properties": {
        "hexGrid": {
          "type": "HexGrid"
        },
        "numbers": {
          "description":"Actually {[HexLocation]}; it's actually an object where each number (2-12) is a key with a list of HexLocations that have that number on them.",
          "type": "array",
          "items": {
              "$ref": "HexLocation"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "Port"
          }
        },
        "radius": {
          "description":"The radius of the map (it includes the center hex, and the ocean hexes; pass this into the hexgrid constructor)",
          "type": "integer"
        },
        "robber": {
          "type": "HexLocation"
        }
      }
    },
    "Port": {
      "id": "Port",
      "required":["location","orientation","ratio","validVertex1","validVertex2"],
      "properties": {
        "inputResource": {
          "type": "string",
          "description" : "What type resource this port trades for. If it's omitted, then it's for any resource.",
          "enum": [
            "Wood",
            "Brick",
            "Sheep",
            "Wheat",
            "Ore"
          ]
        },
        "location": {
          "description" : "Which (ocean) hex this port is on.",
          "type": "HexLocation"
        },
        "orientation": {
          "description" : "Which edge this port is on.",
          "type": "string",
          "enum": [
            "NW",
            "N",
            "NE",
            "E",
            "SE",
            "SW"
          ]
        },
        "ratio": {
          "description" : "The ratio for trade in (ie, if this is 2, then it's a 2:1 port.",
          "type": "integer"
        },
        "validVertex1": {
          "type": "VertexLocation"
        },
        "validVertex2": {
          "type": "VertexLocation"
        }
      }
    },
    "HexLocation": {
      "id": "HexLocation",
      "required":["x","y"],
      "properties": {
        "x": {
          "type": "integer"
        },
        "y": {
          "type": "integer"
        }
      }
    },
    "TradeOffer": {
      "id": "HexLocation",
      "required":["sender","receiver"],
      "properties": {
        "sender": { 
          "description":"The orderID of the person offering the trade",
          "type": "integer"
        },
        "receiver": {
          "description":"The orderID of the person the trade was offered to.",
          "type": "integer"
        },
        "offer": {
          "description":"Positive numbers are resources being offered. Negative are resources being asked for.",
          "type": "ResourceList"
        }
      }
    },
    "VertexLocation": {
      "id": "VertexLocation",
      "required":["x","y","direction"],
      "properties": {
        "x": {
          "type": "integer"
        },
        "y": {
          "type": "integer"
        },
        "direction": {
          "type": "string",
          "enum": [
            "W",
            "NW",
            "NE",
            "E",
            "SE",
            "SW"
          ]
        }
      }
    },
    "EdgeLocation": {
      "id": "EdgeLocation",
      "required":["x","y","direction"],
      "properties": {
        "x": {
          "type": "integer"
        },
        "y": {
          "type": "integer"
        },
        "direction": {
          "type": "string",
          "enum": [
            "NW",
            "N",
            "NE",
            "SW",
            "S",
            "SE"
          ]
        }
      }
    },
    "Hex": {
      "id": "Hex",
      "required":["location","edges","vertexes"],
      "properties": {
        "location": {
          "type": "HexLocation"
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "Edge"
          }
        },
        "vertexes": {
          "type": "array",
          "items": {
            "$ref": "Vertex"
          }
        }
      }
    },
    "Edge": {
      "id": "Edge",
      "properties": {
        "value":{
          "type":"EdgeValue",
          "required":"true"
        }
      }
    },
    "EdgeValue": {
      "id": "EdgeValue",
      "properties": {
        "ownerID":{
          "description":"This is -1 if there is nothing here; otherwise it is the orderID (0-3) of the person who put a piece here",
          "type":"orderID",
          "required":"true"
        }
      }
    },
    "Vertex": {
      "id": "Vertex",
      "properties": {
        "value":{
          "type":"VertexValue",
          "required":"true"
        }
      }
    },
    "VertexValue": {
      "id": "VertexValue",
      "properties": {
        "ownerID":{
          "description":"This is -1 if there is nothing here; otherwise it is the orderID (0-3) of the person who put a piece here",
          "type":"orderID",
          "required":"true"
        },
        "worth":{
          "description":"How many points the piece here is worth (if there's a piece here)",
          "type":"integer",
          "enum": [
            0,
            1,
            2
          ],
          "required":"true"
        }
      }
    }
  }
}
